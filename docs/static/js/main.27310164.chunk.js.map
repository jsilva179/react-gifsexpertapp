{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","propType","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACQ,sBAAMC,SAbK,SAACC,GAEhBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAExBR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,MAOd,SACC,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAnBe,SAACP,GAAMF,EAAcE,EAAEQ,OAAOF,aAyBtDZ,EAAYe,SAAW,CACnBd,cAAiBe,IAAUC,KAAKC,Y,mCC5BvBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCJPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEzB,ECH4B,SAACA,GAEzB,MAA0BlB,mBAAS,CAC/ByB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcD,OATCC,qBAAU,WAENxB,EAAQC,GACPwB,MAAK,SAAAd,GAEFY,EAAS,CAACf,KAAKG,EAAKU,SAAQ,SAElC,CAACpB,IAEGqB,EDbsBI,CAAazB,GAAjCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEhB,OACI,qCACA,6BAAKpB,IACJoB,GAAW,0CACZ,qBAAKJ,UAAU,YAAf,SAEIH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEVzBe,EAAgB,WAEzB,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAEA,OACI,qCACE,iDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEI8C,EAAWlB,KAAK,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAAyBA,SAAWA,GAAtBA,U,MCX/B4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.27310164.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\nconst [inputValue, setinputValue] = useState('');\r\n\r\nconst handleInputValue= (e)=>{ setinputValue(e.target.value);};\r\n\r\nconst handleSubmit=(e)=>\r\n{\r\n    e.preventDefault();\r\n    if(inputValue.trim().length>0)\r\n    {\r\n        setCategories(cats=> [inputValue,...cats]);\r\n        setinputValue('');\r\n    }\r\n        \r\n};\r\n   \r\n\r\nreturn (\r\n        <form onSubmit={handleSubmit}>\r\n         <input \r\n         type=\"text\" \r\n         value={inputValue}\r\n         onChange={handleInputValue}\r\n         />   \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propType = {\r\n    setCategories :  PropTypes.func.isRequired\r\n};","\r\n\r\n/*\r\napi.giphy.com/v1/gifs/search\r\nf1yTezG4VTmP6BhJPWtrpGKHm9GLuaCB\r\n*/\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=f1yTezG4VTmP6BhJPWtrpGKHm9GLuaCB`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\nconst {data:images, loading} =  useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h2>{category}</h2>\r\n        {loading && <p>Loading..</p>}\r\n        <div className=\"card-grid\">\r\n            {\r\n            images.map(img =>(\r\n                <GifGridItem key={img.id} {...img} />\r\n\r\n             ))\r\n            }\r\n        </div>\r\n       </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n   \r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true\r\n    })\r\n    //Cannot work with async methodology, but you can use Then...\r\n    useEffect(()=>\r\n    {\r\n        getGifs(category)\r\n        .then(img=> \r\n        {\r\n            setstate({data:img, loading:false})\r\n        });\r\n    },[category]);\r\n\r\n   return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\n\r\nexport const GiftExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n  \r\n    return (\r\n        <>\r\n          <h2>Gift Expert App</h2>\r\n          <AddCategory setCategories={setCategories} />\r\n          <hr/>  \r\n            {\r\n              categories.map( category=>\r\n                (<GifGrid key={category}  category={ category } />) \r\n              )\r\n            }\r\n         \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpertApp } from './GiftExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GiftExpertApp/>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}